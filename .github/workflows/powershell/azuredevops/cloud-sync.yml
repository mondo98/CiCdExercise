parameters:
  - name: projectId
    type: string
  - name: umbracoCloudApiKey

jobs:
  - job: cloudSync
    displayName: Preflight Checks
    steps:
      # Gets the latest CICD Flow deployment if there is any
      # Will write "latestDeploymentId" to pipeline variables, value can be an uuid or empty string 
      - task: PowerShell@2
        displayName: Get Latest Deployment
        name: getLatestDeploymentId
        env:
          projectId: ${{ parameters.projectId }}
          umbracoApiKey: ${{ parameters.umbracoCloudApiKey }}
        inputs:
          pwsh: true
          targetType: 'filePath'
          filePath: devops/powershell/Get-LatestDeployment.ps1
          arguments: > 
            -ProjectId $($env:projectId)
            -ApiKey $($env:umbracoApiKey)
            -PipelineVendor $(pipelineVendor)

  - job: checkForChanges
    displayName: Check if there are changes since latest deployment
    dependsOn: cloudSync
    condition: ne(dependencies.cloudSync.outputs['getLatestDeploymentId.latestDeploymentId'], '')
    variables:
      latestDeploymentId: $[ dependencies.cloudSync.outputs['getLatestDeploymentId.latestDeploymentId'] ]
    steps:
    # Download git-patch file based on latest deployment
    # Will write "remoteChanges" to pipeline variables, value can be "yes" or "no"
    # When "remoteChanges" is yes, there will also be downloaded a patch-file to the path you specified in -DownloadFolder parameter
      - task: PowerShell@2
        displayName: Fetch Changes From Cloud
        name: latestChanges
        env:
          projectId: ${{ parameters.projectId }}
          umbracoApiKey: ${{ parameters.umbracoCloudApiKey }}
        inputs:
          pwsh: true
          targetType: 'filePath'
          filePath: devops/powershell/Get-ChangesById.ps1
          arguments: > 
            -ProjectId $($env:projectId)
            -ApiKey $($env:umbracoApiKey)
            -DeploymentId $(latestDeploymentId)
            -DownloadFolder $(Pipeline.Workspace)/patch
            -PipelineVendor $(pipelineVendor)

      - task: Powershell@2
        displayName: See diff content if any
        condition: and(succeeded(), eq(variables['latestChanges.remoteChanges'], 'yes'))
        inputs:
          pwsh: true
          targetType: 'inline'
          script: Get-Content $(Pipeline.Workspace)/patch/git-patch.diff

      - task: PublishPipelineArtifact@1
        displayName: Store diff before applying
        condition: and(succeeded(), eq(variables['latestChanges.remoteChanges'], 'yes'))
        inputs: 
          targetPath: $(Pipeline.Workspace)/patch/git-patch.diff
          artifact: PatchFile

  - job: ApplyRemoteChanges
    displayName: Apply Remote Changes
    dependsOn: [ cloudSync, checkForChanges ]
    variables:
      latestDeploymentId: $[ dependencies.cloudSync.outputs['getLatestDeploymentId.latestDeploymentId'] ]
      remoteChangesValue: $[ dependencies.checkForChanges.outputs['latestChanges.remoteChanges'] ]
      gitPatchFile : $(Pipeline.Workspace)/patch/git-patch.diff
    steps:
      - checkout: 'self'
        persistCredentials: true
        clean: true
        fetchDepth: 0
        condition: eq(variables.remoteChangesValue, 'yes')

      - task: DownloadPipelineArtifact@2
        displayName: Get stored diff
        inputs:
          buildType: 'current'
          artifactName: PatchFile
          targetPath: $(Pipeline.Workspace)/patch
        condition: eq(variables.remoteChangesValue, 'yes')
      
      # Using plain git to try an push changes back to local repo
      # Depending on your setup you may need to change settings and permissions to better fit your needs
      # This targets the same branch as the pipeline was triggered on.
      # Stopping a new pipeline run by using the "[skip ci]" as part of commit message 
      - pwsh: |
          Write-Host "hello branch: $($env:BUILD_SOURCEBRANCHNAME)"
          git checkout $env:BUILD_SOURCEBRANCHNAME
          git config --global user.name "Azure Pipeline"
          git config --global user.email "hosted.agent@dev.azure.com"
          git apply -v $(gitPatchFile)
          git add --all
          git commit -m "Adding cloud changes since deployment $(latestDeploymentId) [skip ci]"
          git push --set-upstream origin $env:BUILD_SOURCEBRANCHNAME
        displayName: Applying git patch to branch
        workingDirectory: $(System.DefaultWorkingDirectory)
        condition: eq(variables.remoteChangesValue, 'yes')